Exercises on Design Patterns II

Q1

a) Different but related behaviours are each given a concrete class which implement the same interface. By
encapsulating the interface within a client, that client can use any of the available behaviours.

b) It is appropriate to use the strategy pattern whenever i unknown until runtime.


Q3

The abstract factory method should be used when you wish to separate the client from concrete types. It
allows for new concrete types to be introduced without rewriting the client code because client depend only
abstract types.


Q5

Generally, the details of object construction are kept within the class which composes it because this increases 
modularity and decreases construction bloat. Construction bloat occurs was there are many lines of code which 
instantiate the same object. If at a future point, the programmer wishes to change this object for another, 
each dependent line of code must be changed. By limiting object instantiation to the class which composes that 
object, only 1 line of code needs to be changed. Changing components with this level of ease greatly increases a 
program's modularity.


Q7

a) The facade pattern uses a wrapper class which encapsulates one or more classes within it. The intention is 
to hide the complexity within inner classes from a client. The wrapper class provides a simplified 
interface for utilising the behaviour of inner classes.

b) The facade pattern can be used to achieve the following aims: reduce dependencies on methods used within inner 
classes; increase code readability; make complex code easier to use.


Q9

The bridge pattern is used when there is a need to remove the binding between an abstraction and an
implementation. The bridge pattern introduces a class between the abstraction and implementation which allows 
each to differ independently. 


Q11

a) The composite pattern takes a group of different objects and creates an abstract class which defines
generic behaviour across these classes. The intent is to model classes in a tree structure. An example of this 
could be file system where directories and files have similar behaviours such as copy, cut and paste.

b) The composite pattern should be used when new components are frequently added. By defining a generic behaviour, 
components can change without effecting clients.

c) The four particpants in the composite pattern are Composite, Component, Leaf and Client.